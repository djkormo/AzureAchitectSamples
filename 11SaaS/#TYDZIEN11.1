11.1 Prosty system do wykrywania zdjêæ, które nie powinny byæ publikowane w sklepie.

ZnajdŸ dobr¹ us³ugê i postaraj siê o najprostszy system, który po podaniu adresu URL sprawdza, czy zdjêcie mo¿na umieœciæ na stronie czy jednak nie. 


https://www.microsoft.com/developerblog/2017/07/01/building-image-classification-pipeline-using-serverless-architecture/
https://www.henkboelman.com/serverless-ai-with-custom-vision-and-azure-functions/




Dodanie konta dla us³ug poznawczych

Wybra³em darmowy plan F0 i lokalizacjê nordeurope.

Po uruchomieniu nale¿y pobra¿ wartoœæ klucza, bêdzie on potrzebny do App Service, na który osadzona jest funkcja.

Taki endpoint ma wartoœæ zmiennej 

https://northeurope.api.cognitive.microsoft.com/vision/v2.0

Nale¿y zwróciæ uwagê na wybranie w konfiguracji dobrej wartoœci. Wygenerowany klucz do API dzia³a tylka dla danej lokalizacji.

A App Service dodajemy dwie zmienne œrodowiskowe o nazwie
VisionEndpoint (endpoint us³ug poznawczych)
SubscriptionKey (klucz dostêpu do us³ug poznawczych)




Budowa funkcji wyzwalanej na podstawie dodania do Blob Storage  nowegoobrazka.

Kontener, do którego wrzucami zdjêcia ma nazwê uploaded 

Kontener, do którego trafiaj¹ zaakceptowane zdjêcia ma nazwê  accepted

Kontener, do którego trafiaj¹ niezaakceptowane zdjêcia ma nazwê  rejested

Nazwa funkcji BlobTriggerCSharpCognitiveServiceForImage

wykorzystano runtime w wersji 1.

Wymaga to zmiany wartoœæzmiennje œrodowiskowej AppService 
FUNCTIONS_EXTENSION_VERSION na ~1



Sk³adniki


project.json

{
"frameworks": {
"net46": {
"dependencies": {
"WindowsAzure.Storage": "7.2.0"
}
}
}
}


function.json

{
  "bindings": [
    {
      "name": "myBlob",
      "type": "blobTrigger",
      "direction": "in",
      "path": "uploaded/{name}",
      "connection": "AzureWebJobsStorage"
    }
  ],
  "disabled": false
}

run.csx 


using Microsoft.WindowsAzure.Storage.Blob;
using Microsoft.WindowsAzure.Storage;
using System.Net.Http.Headers;
using System.Configuration;
public async static Task Run(Stream myBlob, string name, TraceWriter log)
{
log.Info($"Analyzing uploaded image {name} for adult content...");
var array = await ToByteArrayAsync(myBlob);
var result = await AnalyzeImageAsync(array, log);
log.Info("Is Adult: " + result.adult.isAdultContent.ToString());
log.Info("Adult Score: " + result.adult.adultScore.ToString());
log.Info("Is Racy: " + result.adult.isRacyContent.ToString());
log.Info("Racy Score: " + result.adult.racyScore.ToString());
if (result.adult.isAdultContent || result.adult.isRacyContent)
{
// Copy blob to the "rejected" container
StoreBlobWithMetadata(myBlob, "rejected", name, result, log);
}
else
{
// Copy blob to the "accepted" container
StoreBlobWithMetadata(myBlob, "accepted", name, result, log);
}
}
private async static Task<ImageAnalysisInfo> AnalyzeImageAsync(byte[] bytes,
TraceWriter log)
{
HttpClient client = new HttpClient();
var key = ConfigurationManager.AppSettings["SubscriptionKey"];
client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", key);
HttpContent payload = new ByteArrayContent(bytes);
payload.Headers.ContentType = new
MediaTypeWithQualityHeaderValue("application/octet-stream");
var endpoint = ConfigurationManager.AppSettings["VisionEndpoint"];

var results = await client.PostAsync(endpoint + "/analyze?visualFeatures=Adult",
payload);
var result = await results.Content.ReadAsAsync<ImageAnalysisInfo>();
return result;
}
// Writes a blob to a specified container and stores metadata with it
private static void StoreBlobWithMetadata(Stream image, string containerName, string
blobName, ImageAnalysisInfo info, TraceWriter log)
{
log.Info($"Writing blob and metadata to {containerName} container...");
var connection =
ConfigurationManager.AppSettings["AzureWebJobsStorage"].ToString();
var account = CloudStorageAccount.Parse(connection);
var client = account.CreateCloudBlobClient();
var container = client.GetContainerReference(containerName);
try
{
var blob = container.GetBlockBlobReference(blobName);
if (blob != null)
{
// Upload the blob
blob.UploadFromStream(image);
// Get the blob attributes
blob.FetchAttributes();
// Write the blob metadata
blob.Metadata["isAdultContent"] = info.adult.isAdultContent.ToString();
blob.Metadata["adultScore"] =
info.adult.adultScore.ToString("P0").Replace(" ","");
blob.Metadata["isRacyContent"] = info.adult.isRacyContent.ToString();
blob.Metadata["racyScore"] =
info.adult.racyScore.ToString("P0").Replace(" ","");
// Save the blob metadata
blob.SetMetadata();
}
}
catch (Exception ex)
{
log.Info(ex.Message);
}
}
// Converts a stream to a byte array
private async static Task<byte[]> ToByteArrayAsync(Stream stream)
{
Int32 length = stream.Length > Int32.MaxValue ? Int32.MaxValue :
Convert.ToInt32(stream.Length);
byte[] buffer = new Byte[length];
await stream.ReadAsync(buffer, 0, length);
stream.Position = 0;
return buffer;
}
public class ImageAnalysisInfo
{
public Adult adult { get; set; }
public string requestId { get; set; }
}
public class Adult
{
public bool isAdultContent { get; set; }
public bool isRacyContent { get; set; }
public float adultScore { get; set; }
public float racyScore { get; set; }
}


Test przeprowadzi³em na kilku obrazach

Jeden z nich nie przeszed³ weryfikacji

[Info] Function started (Id=e48fccf1-33c9-4d9a-b082-ad61acc6d5d9)
[Info] Analyzing uploaded image abc.jpg for adult content...
[Info] Is Adult: True
[Info] Adult Score: 0.9495677
[Info] Is Racy: True
[Info] Racy Score: 0.979344
[Info] Writing blob and metadata to rejected container...
[Info] Function completed (Success, Id=e48fccf1-33c9-4d9a-b082-ad61acc6d5d9, Duration=715ms)





6.3	Jeśli masz już dość myślenia i planowania i nie możesz doczekać się by coś zrobić praktycznie to zadanie nr 3 jest dla Ciebie  Chciałbym byś połączył kilka komponentów za sobą a przy tym nie wydał strasznej ilość budżetu. Język pisania dowolny 
Opis zadania: 
1)	Stwórz prostą funkcję, opartą o timer, która dodaje wiadomości do kolejki typu Storage Queue. Kilka przykładów tutaj: https://docs.microsoft.com/en-us/sandbox/functions-recipes/queue-storage
2)	Stwórz drugą funkcję, która czeka na wiadomości w Storage Queue i zapisuje jej do bazy – może to być darmowa wersja Azure SQL Database
3)	Stwórz trzecią funkcję, która reaguje na request http i dla podanej w parametrze daty z dokładnością do dnia (żeby było prościej) zwraca z bazy Azure SQL wszystkie komunikaty z tego dnia, które tam zostały zapisane, najlepiej w postaci JSON’a
4)	Stwórz Azure API Management (kiedy będziesz miał już wszystkie inne elementy gotowe) i wystaw na Azure API Management funkcję z zadania nr 3. Dodatkowo, dodaj do wywołania tej funkcji politykę, która nie pozwala jej wywołać częściej w minucie niż trzy razy
Have fun! To zadanie pokaże Ci (mam nadzieję w prosty sposób, czym są i jak działają funkcje)


Testowane z Azure Storage Explorer

##Funkcja 1 - timer -> queue (Timer2Queue)

### run.csx 

using System;

public static void Run(TimerInfo myTimer, ICollector<string> outputQueueItem, ILogger log)
{
    log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}");
    outputQueueItem.Add("Message added from C#  Timer function at: " + DateTime.Now);
}

###function.json

{
  "bindings": [
    {
      "name": "myTimer",
      "type": "timerTrigger",
      "direction": "in",
      "schedule": "0 */5 * * * *"
    },
    {
      "type": "queue",
      "name": "outputQueueItem",
      "queueName": "queuefortimer",
      "connection": "AzureWebJobsStorage",
      "direction": "out"
    }
  ]
}

##Funkcja 2  Queue -> database (Queue2Database)

/*

w zmiennej środowiskowej DATABASECONNECTIONSTRING trzymamy konfigurację połączenia



create table message

( TextMessage varchar(max), UpdatedDateTime datetime)
*/

###run.csx 

using System;
using System.Threading.Tasks;
using System.Data.SqlClient;

public static async  Task Run(string myQueueItem, ILogger log)
        {
            log.LogInformation($"C# Queue trigger function processed: {myQueueItem}");

            var str = Environment.GetEnvironmentVariable("DATABASECONNECTIONSTRING");
            using (SqlConnection conn = new SqlConnection(str))
            {
                conn.Open();
                var command = $"Insert into message (TextMessage, UpdatedDateTime) values ('{myQueueItem}', GetDate())";

                using (SqlCommand cmd = new SqlCommand(command, conn))
                {
                    var rows = await cmd.ExecuteNonQueryAsync();
                    log.LogInformation($"{rows} rows were updated");
                }
            }
}

###function.json

{
  "bindings": [
    {
      "name": "myQueueItem",
      "type": "queueTrigger",
      "direction": "in",
      "queueName": "queuefortimer",
      "connection": "AzureWebJobsStorage"
    }
  ],
  "disabled": false
}

##Funkcja 3  httpd -> Database  (HttpTriggerFromDatabase)



###run.csx 

using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Data.SqlClient;
using System.Net.Http;
using System.Web;

public static HttpResponseMessage Run(HttpRequest req, ILogger log)
{
    string date = req.Query["date"];

    if (String.IsNullOrEmpty(date)) 
    {
        return new HttpResponseMessage(System.Net.HttpStatusCode.BadRequest);
    }

    var json = new StringBuilder();
    var cs = Environment.GetEnvironmentVariable("DATABASECONNECTIONSTRING");
    var sql = $"select TextMessage from message where convert(varchar(10),UpdatedDatetime,120)='{date}' for json path;";
        
    using (SqlConnection conn = new SqlConnection(cs))
    {
        conn.Open();

        log.LogInformation("connected to DB");
        log.LogInformation("Sql: "+sql);

        using (SqlCommand cmd = new SqlCommand(sql, conn))
        {
            SqlDataReader r = cmd.ExecuteReader();

            if (!r.HasRows)
            {
                json.Append("[]");
            }
            else
            {
                while (r.Read())
                {
                    json.Append(r.GetString(0));
                }
            }
        }
    }

    var response = new HttpResponseMessage(System.Net.HttpStatusCode.OK);
    response.Content = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
    
    return response;
}


###function.json


{
  "bindings": [
    {
      "type": "httpTrigger",
      "name": "req",
      "authLevel": "anonymous",
      "direction": "in"
    }
  ]
}
Przyklad wywołania w wersji anonymous


https://djkormo2018szkola.azurewebsites.net/api/HttpTriggerFromDataBase?date=2018-11-26

Wyjściowy JSON’a


[{"TextMessage":"sample queue data","UpdatedDateTime":"2018-11-26T22:00:30.880"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 9:40:04 PM","UpdatedDateTime":"2018-11-26T22:06:39.240"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 9:45:00 PM","UpdatedDateTime":"2018-11-26T22:06:39.317"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 9:50:00 PM","UpdatedDateTime":"2018-11-26T22:06:39.440"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:00:00 PM","UpdatedDateTime":"2018-11-26T22:06:39.457"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 9:55:00 PM","UpdatedDateTime":"2018-11-26T22:06:40.067"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:09:59 PM","UpdatedDateTime":"2018-11-26T22:10:02.677"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:50:00 PM","UpdatedDateTime":"2018-11-26T22:50:01.030"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:55:00 PM","UpdatedDateTime":"2018-11-26T22:55:02.980"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:59:59 PM","UpdatedDateTime":"2018-11-26T23:00:00.450"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:10:00 PM","UpdatedDateTime":"2018-11-26T23:10:01.573"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:14:59 PM","UpdatedDateTime":"2018-11-26T23:15:01.230"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:20:00 PM","UpdatedDateTime":"2018-11-26T23:20:04.543"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:25:02 PM","UpdatedDateTime":"2018-11-26T23:25:06.120"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:30:00 PM","UpdatedDateTime":"2018-11-26T23:30:01.887"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:35:00 PM","UpdatedDateTime":"2018-11-26T23:35:01.277"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:55:00 PM","UpdatedDateTime":"2018-11-26T23:55:03.847"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:05:00 PM","UpdatedDateTime":"2018-11-26T22:06:39.457"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:15:00 PM","UpdatedDateTime":"2018-11-26T22:15:01.487"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:20:00 PM","UpdatedDateTime":"2018-11-26T22:20:03.220"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:25:00 PM","UpdatedDateTime":"2018-11-26T22:25:02.080"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:30:00 PM","UpdatedDateTime":"2018-11-26T22:30:01.093"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:35:00 PM","UpdatedDateTime":"2018-11-26T22:35:02.123"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:40:00 PM","UpdatedDateTime":"2018-11-26T22:40:02.970"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 10:45:00 PM","UpdatedDateTime":"2018-11-26T22:45:02.967"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:05:00 PM","UpdatedDateTime":"2018-11-26T23:05:04.010"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:40:00 PM","UpdatedDateTime":"2018-11-26T23:40:02.850"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:44:59 PM","UpdatedDateTime":"2018-11-26T23:45:02.617"},{"TextMessage":"Message added from C#  Timer function at: 11\/26\/2018 11:50:00 PM","UpdatedDateTime":"2018-11-26T23:50:00.100"}]

Obsługa API management na podstawie

https://www.brianbunke.com/blog/2018/03/02/azure-functions-api-management/






